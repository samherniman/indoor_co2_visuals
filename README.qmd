---
title: ""
format: gfm
editor: visual
execute:
  echo: false
---

```{r}
#| include: false
# things to add
# numbers of obs by category
# averages by category
# map showing observations over time animation
# lollipop summer vs winter shops - maybe summarize by category
# highest velocity based off of different time periods
```

# Monthly indoorCO2map.com summary for `r lubridate::today()  |> lubridate::month(label = TRUE, abbr = FALSE)` `r lubridate::today()  |> lubridate::year()`

```{r}
#| warning: false
#| message: false
#| include: false 
library(ggplot2)
library(tidyplots)
library(gt)
library(patchwork)

`%||%` <- function(x, y) {
  if (is.na(x)) y else x
}
```

```{r}
#| warning: false
#| message: false
#| include: false
buildings_wide_df <- autocruller::ac_get_co2("web") 

buildings_wide_df_short <- 
buildings_wide_df |> 
    dplyr::filter(dplyr::between(
        lubridate::floor_date(date, unit = "month"),
        # lubridate::ymd("2025-09-20") |> lubridate::floor_date(unit = "month"),
        # lubridate::ymd("2025-09-20") |> lubridate::ceiling_date(unit = "month")
        lubridate::today() |> lubridate::floor_date(unit = "month"),
        lubridate::today() |> lubridate::ceiling_date(unit = "month")
    )) |> 
        dplyr::mutate(type = "building")

transit_long_df <- autocruller::ac_get_co2("transit") 

transit_long_df_short <- 
transit_long_df |> 
    dplyr::filter(dplyr::between(
        lubridate::floor_date(date, unit = "month"),
        lubridate::today() |> lubridate::floor_date(unit = "month"),
        lubridate::today() |> lubridate::ceiling_date(unit = "month")
    )) |> 
        dplyr::mutate(type = "transit")
# everything_df <- dplyr::bind_rows()
```

```{r}
common_building_types <- buildings_wide_df |> 
  dplyr::group_by(osmtag) |> 
  dplyr::count() |> 
  dplyr::filter(
    n > quantile(n, 0.98, na.rm = TRUE) & osmtag != ""
    )
```
```{r}
#| include: false
# list new countries

new_countries <- unique(buildings_wide_df_short$countryname)[!(unique(buildings_wide_df_short$countryname) %in% unique(buildings_wide_df$countryname))]

new_countries_sentence <- 
if (length(new_countries)) {
  glue::glue("Additionally, the first {ifelse(length(new_countries)==1, 'measurement was added for the country', 'measurements were added for the countries')} of {stringr::str_flatten_comma(new_countries, last = ' and ')} this month. Welcome to the glorious world of CO^2^ monitoring {stringr::str_flatten_comma(new_countries, last = ' and ')}!")
}
```

```{r}
#| eval: false
#| include: false

buildings_wide_df_short_geo <- 
  buildings_wide_df_short |> 
  sf::st_coordinates() |> 
  as.data.frame() |> 
  tidygeocoder::reverse_geocode(
    lat = Y, long = X, 
    method = 'osm',
    address = address_found, 
    full_results = TRUE
    )
buildings_wide_df_short_geo <- 
  buildings_wide_df_short_geo |> 
  dplyr::mutate(
    country = stringr::str_replace_all(country, "Schweiz/Suisse/Svizzera/Svizra", "Switzerland") |> stringr::str_replace_all("België / Belgique / Belgien", "Belgium"))
saveRDS(buildings_wide_df_short_geo, here::here("data/derivative/buildings_wide_df_short_geo.rds"))
```

```{r}
#| eval: false
#| include: false

transit_long_df_short_geo <- 
  transit_long_df_short |> 
  sf::st_coordinates() |> 
  as.data.frame() |> 
  tidygeocoder::reverse_geocode(
    lat = Y, long = X, 
    method = 'osm',
    address = address_found, 
    full_results = TRUE
    )
transit_long_df_short_geo <- 
  transit_long_df_short_geo |> 
  dplyr::mutate(
    country = stringr::str_replace_all(country, "Schweiz/Suisse/Svizzera/Svizra", "Switzerland") |> stringr::str_replace_all("België / Belgique / Belgien", "Belgium"))
saveRDS(transit_long_df_short_geo, here::here("data/derivative/transit_long_df_short_geo.rds"))

```

```{r}
#| eval: false
#| include: false

# Attempt at using h3 to standardize geocoded locations

# buildings_wide_df_short_geo <- 
buildings_h3 <- 
  buildings_wide_df_short |> 
  sf::st_coordinates()
  
buildings_h3 <- 
  h3::geo_to_h3(buildings_h3[,ncol(buildings_h3):1], 5) 

buildings_wide_df_short_geo <- 
buildings_wide_df_short |> 
  dplyr::mutate(
    h3_geo = sf::st_coordinates(geometry) |> h3::geo_to_h3(4)
  )

  
buildings_wide_df_short_geo <- 
  buildings_wide_df_short_geo$h3_geo |>
  unique() |> 
  h3::h3_to_geo_sf() |> 
  sf::st_coordinates() |> 
  data.frame() |> 
  tidygeocoder::reverse_geocode(
    lat = Y, long = X, 
    method = 'osm',
    address = address_found, 
    # return_input = TRUE,
    full_results = TRUE
    )
# saveRDS(buildings_wide_df_short_geo, here::here("data/derivative/buildings_wide_df_short_geo.rds"))
```

```{r}
#| include: false
describe_most_measured <- function(x) {
  sentence_mm <- 
  x |> 
    glue::glue_data("{nwrname}, a {osmtag %||% co2atlaskey} in {location_description} (min: {ppm_min}, mean: {ppm_avg}, max: {ppm_max})") |> 
    stringr::str_flatten_comma(last = " and ")

  if (nrow(x) == 1) {
    return(glue::glue("The most measured building was {sentence_mm}, which was measured {x$n[1]} times."))
  }

  if (nrow(x) > 1) {
    glue::glue("The most measured buildings were {sentence_mm}, which were measured {x$n[1]} times each.")
  }
  
}

buildings_wide_df_short_geo <- 
  # buildings_wide_df_short_geo |> 
  readRDS(here::here("data/derivative/buildings_wide_df_short_geo.rds")) |> 
  dplyr::rowwise() |> 
  dplyr::mutate(
    location_description = glue::glue("{city %||% county %||% province %||% state %||% town %||% municipality %||% region %||% borough %||% suburb %||% neighbourhood %||% city_district}, {country}")
      ) |> 
    sf::st_as_sf(coords = c("X", "Y"), crs = sf::st_crs(buildings_wide_df_short))

buildings_wide_df_short <- sf::st_join(
  buildings_wide_df_short,
  buildings_wide_df_short_geo,
  left = TRUE,
  largest = TRUE
) |> dplyr::ungroup()

buildings_long_df <- autocruller::ac_unnest_longer(buildings_wide_df_short)
```

## Buildings
  
```{r}
#| echo: false
most_measured <- 
buildings_wide_df_short |> 
  dplyr::group_by(combined_id) |> 
  dplyr::summarise(
    n = dplyr::n(),
    nwrname = dplyr::first(nwrname),
    osmtag = dplyr::first(osmtag),
    countryname = dplyr::first(countryname),
    location_description = dplyr::first(location_description),
    min_day = min(date),
    max_day = max(date),
    ppm_min = min(ppmavg) |> round(),
    ppm_avg = mean(ppmavg) |> round(),
    ppm_max = max(ppmavg) |> round()
  ) |> 
  dplyr::slice_max(n = 1, order_by = n)
```

This month there were `r nrow(buildings_wide_df_short)` measurements of `r length(unique(buildings_wide_df_short$combined_id))` unique buildings. `r describe_most_measured(most_measured)` 

```{r}
#| warning: false
#| message: false
countries_count <- 
buildings_wide_df_short |> 
    dplyr::group_by(countryname) |> 
    dplyr::count() |> 
    tidyr::drop_na() |> 
    sf::st_drop_geometry() |> 
    dplyr::ungroup()

# not yet done. need to give transit data a country col
# countries_count_transit <- 
#     transit_long_df |> 
#     dplyr::group_by(countryname) |> 
#     dplyr::summarise(dplyr::n_distinct(uid)) |> 
#     tidyr::drop_na() |> 
#     sf::st_drop_geometry()
# then join with countries_count
countries_count <- countries_count[order(countries_count$n, decreasing = TRUE),] |> 
  tidyr::drop_na() |> 
  dplyr::filter(countryname != "")
# countries_count <- dplyr::left_join(countries_count, countries_count_transit, by = dplyr::join_by(countryname))
# countries_count |> 
#     gt() |> 
#     tab_header(title = "Top countries") |> 
#     cols_label(
#         countryname = "Country",
#         n = "Number of buildings"
#     ) |> 
#     tab_options(
#         table_body.hlines.width = 0
#         )
    
```

```{r}
#| warning: false
#| message: false
countries_count |> 
  tidyplot(
    x = countryname,
    y = n,
    color = countryname
    ) |>  
    add_barstack_absolute() |> 
    adjust_x_axis(
    rotate_labels = TRUE
  ) |>
    sort_x_axis_labels() |> 
    add_data_labels(
      label = n, 
      color = "black",
      label_position = "above",
      fontsize = 14
      ) |> 
    adjust_size(width = NA, height = NA, unit = "cm") |> 
    adjust_font(fontsize = 14) |> 
    adjust_y_axis_title("Number of measurements") |> 
    adjust_x_axis_title("Country") |> 
    remove_legend() |> 
    adjust_padding(top = 0.3) |> 
    adjust_title("Building measurements per country") |> 
    adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

There were measurements in `r nrow(countries_count)` seperate countries. `r new_countries_sentence` The following graph shows the distribution of the most common building types in the month of `r lubridate::today()  |> lubridate::month(label = TRUE, abbr = FALSE)`.

```{r}
#| include: true
#| eval: true
#| warning: false
#| message: false

buildings_long_df |> 
  dplyr::filter(
    co2readings >= 410
  ) |> 
  dplyr::mutate(
    newtag = dplyr::if_else(
      osmtag %in% common_building_types$osmtag,
      osmtag,
      "other"
    ) |> 
      stringr::str_replace_all("_", " ") |> 
      stringr::str_to_sentence()
    ) |> 
  dplyr::group_by(obs_number) |> 
  dplyr::summarise(
    ppmavg = median(ppmavg, na.rm = TRUE),
    newtag = dplyr::first(newtag)
    ) |>  
tidyplot(
    x = newtag,
    y = ppmavg,
    fill = ppmavg
    ) |>  
    add_boxplot(linewidth = 1.4, fill = "white", color = "grey30", show_outliers = FALSE) |> 
    add_data_points_beeswarm(size = 3, alpha = 0.4) |> 
    # add_curve_fit(linewidth = 2,  alpha = 0.5,  se = FALSE) |> 
    # add_data_points(size = 2, alpha = 0.4) |> 
    adjust_x_axis(
    title = "Distribution by type",
    rotate_labels = TRUE
    # breaks = seq(0, 52, by = 4)
  ) |>
  adjust_y_axis(
    transform = "log2",
    limits = c(420, NA)
    ) |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  remove_legend() |> 
  # adjust_legend_title("Building type") |> 
  adjust_y_axis_title("CO2 ppm median") |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

```{r}
range01 <- function(x, ...){(x - min(x, ...)) / (max(x, ...) - min(x, ...))}

buildings_long_df_med <- buildings_long_df |> 
  dplyr::filter(
    co2readings >= 400
  ) |> 
    dplyr::group_by(obs_number) |> 
    dplyr::mutate(
      median_co2 = median(co2readings),
      time_n = dplyr::row_number(),
      time_range = range01(time_n),
      description_str = glue::glue("{nwrname} in {location_description}")
    ) |> 
      dplyr::ungroup()

highest_building <- buildings_long_df_med |> 
  dplyr::slice_max(order_by = median_co2)
lowest_building <- buildings_long_df_med |> 
  dplyr::slice_min(order_by = median_co2)
```

```{r}
describe_buildings <- function(x, measure = "highest") {
  if (nrow(x) == 1) {
    return(glue::glue("The building with the {measure} measured CO^2^ levels was {x$description_str} with a median CO^2^ value of {x$median_co2} ppm."))
  }

  if (nrow(x) > 1) {
    return(glue::glue("The buildings with the {measure} measured CO^2^ levels were {stringr::str_flatten_comma(x$description_str, last = ' and ')} with median CO^2^ values of {x$median_co2} ppm.") |> dplyr::first())
  }
}

lowest_sentence <- lowest_building |> 
  dplyr::group_by(obs_number) |> 
  dplyr::summarise(
    description_str = dplyr::first(description_str),
    median_co2 = dplyr::first(median_co2)
  ) |> 
    describe_buildings(measure = "lowest")

highest_sentence <- highest_building |> 
  dplyr::group_by(obs_number) |> 
  dplyr::summarise(
    description_str = dplyr::first(description_str),
    median_co2 = dplyr::first(median_co2)
  ) |> 
    describe_buildings(measure = "highest")

co2_threshold <- 500

buildings_under_threshold <- 
  buildings_long_df_med |> 
  dplyr::filter(median_co2 < co2_threshold) |> 
  dplyr::group_by(obs_number) |> 
  dplyr::summarise(
    name = dplyr::first(nwrname),
    co2 = dplyr::first(median_co2),
    osmtag = dplyr::first(osmtag) |> stringr::str_to_sentence(),
    location_description = dplyr::first(location_description)
  ) |> 
  dplyr::select(
    -obs_number
  )
```

`r highest_sentence` `r lowest_sentence` There were some measurements that were even lower than this, but we have removed them from this analysis. Generally outdoor CO^2^ levels don't go below 410 ppm, therefore we have removed any datapoints that are below 400 ppm. If your CO^2^ monitor consistently shows levels below 410 ppm while you are inside or outside, it is likely that your monitor needs recalibrating.


```{r}
#| warning: false
#| eval: false
co2df <- tibble::tibble(
  time = 1:length(highest_building$obs_number),
  co2 = highest_building$co2readings,
  building = highest_building$nwrname
)

ggplot(co2df, aes(x = time, y = co2, color = building)) +
  geom_smooth(color = "grey80") +
  geom_point(size = 4) +
  ylim(400, NA) + 
  xlab("Time (minutes)") +
  ylab(bquote(CO^2)) +
  theme_minimal() +
  theme(
    text = element_text(size = 16),
    panel.grid = element_blank(),
    axis.text.x = element_text(size = 16),
    axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
    legend.position="none"
    )
```

```{r}
#| warning: false
#| eval: false
co2df <- tibble::tibble(
  time = lowest_building$time,
  co2 = lowest_building$co2readings,
  building = lowest_building$nwrname
)

ggplot(co2df, aes(x = time, y = co2, color = building)) +
  geom_smooth() +
  geom_point(size = 4) +
  ylim(400, NA) + 
  xlab("Time (minutes)") +
  ylab(bquote(CO^2)) +
  theme_minimal() +
  theme(
    text = element_text(size = 16),
    panel.grid = element_blank(),
    axis.text.x = element_text(size = 16),
    axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
    legend.position="none"
    )
```

Here is a graph of all the recordings that happened this month shown by the grey curves. I've highlighted the highest and lowest ones.

```{r}
#| warning: false
#| message: false
ylim_max <- max(highest_building$co2readings) + 200

buildings_box <- 
buildings_long_df_med |> 
  dplyr::group_by(obs_number) |> 
ggplot(aes(x = 1, y = co2readings)) +
  geom_boxplot(outliers = FALSE) +
  ylim(400, ylim_max) + 
  # labs(title = "Highest and lowest recordings this month") +
  # xlab("Time (from recording start to end)") +
  ylab(bquote(CO^2)) +
  theme_void() +
  theme(
    # text = element_blank(),
    plot.title = element_text(size = 12),
    panel.grid = element_blank(),
    axis.text.x = element_blank(),
    # axis.line = element_line(colour = "black", size = 1, linetype = "solid"),
    legend.position="none"
    ) 
```

```{r}
#| warning: false
#| message: false

buildings_lines <- 
buildings_long_df_med |> 
  dplyr::group_by(obs_number) |> 
ggplot(aes(x = time_range, y = co2readings, group = obs_number)) +
  geom_smooth(
    se = FALSE,
    color = "grey80"
  ) +
  geom_smooth(
    data = lowest_building,
    mapping = aes(x = time_range, y = co2readings, color = obs_number),
    se = FALSE
  ) +
  geom_point(
    data = lowest_building,
    mapping = aes(x = time_range, y = co2readings, color = obs_number),
    size = 4
  ) +
  geom_smooth(
    data = highest_building,
    mapping = aes(x = time_range, y = co2readings, color = obs_number),
    se = FALSE
  ) +
  geom_point(
    data = highest_building,
    mapping = aes(x = time_range, y = co2readings, color = co2readings),
    size = 4
    ) +
  scale_color_viridis_c(option = "magma")+
  # scico::scale_color_scico("hawaii", direction = -1) +
  annotate(
    "label", 
    x = .7,
    y =  mean(lowest_building$ppmavg, na.rm = TRUE) + 140,
    label = unique(lowest_building$nwrname) |> stringr::str_flatten_comma(last = ' and ')
    ) +
  annotate(
    "label", 
    x = .2,
    y =  mean(highest_building$ppmavg, na.rm = TRUE) - 140,
    label = unique(highest_building$nwrname) |> stringr::str_flatten_comma(last = ' and ')
    ) +
  ylim(400, ylim_max) + 
  labs(title = "Highest and lowest recordings this month") +
  xlab("Time (from recording start to end)") +
  ylab(bquote(CO^2)) +
  theme_minimal() +
  theme(
    text = element_text(size = 16),
    plot.title = element_text(size = 12),
    panel.grid = element_blank(),
    axis.text.x = element_text(size = 16),
    axis.line = element_line(colour = "black", linewidth = 1, linetype = "solid"),
    legend.position="none"
    ) 

```

```{r}
#| warning: false
#| message: false
buildings_lines + buildings_box + plot_layout(widths = c(10, 1))
```

Here is a chart showing the `r nrow(buildings_under_threshold)` measurements that had a median CO^2^ value under `r co2_threshold`. Keep in mind that some of these are potentially miscalibrated sensors or erroneous recordings where the sensor was outside. However, it is important to celebrate the places that do in fact have well ventilated spaces.  


```{r}
#| warning: false
#| message: false

# add a column showing how many times a building has been on this list
buildings_under_threshold |> 
  knitr::kable(
    col.names = c("Name", "Median CO<sup>2</sup>", "Building type", "Location")
  )
#  buildings_under_threshold |> 
#     gt() |> 
#     tab_header(title = "Measurements under 500 ppm") |> 
#     cols_label(
#         name = "Name",
#         co2 = "CO2 ppm",
#         osmtag = "Building type",
#         location_description = "Location"
#     ) |> 
#     tab_options(
#         table_body.hlines.width = 0
#         )
        
```


## Trends over time

The following are charts that are updated every month, but they reflect all data collected so far from the indoorco2 monitoring project (since April 2024). Over time, we should be able to see yearly trends where CO^2^ levels are higher in the Winter when shopkeepers close their windows to keep things warm and then lower CO^2^ levels when shopkeepers open their windows in the Summer.  
We can start to see trends like this in the following graph which graphs CO^2^ against the week of the year. There are two relevant points you should know about the X axis `Week of the year (meteorological)`. 

1. Datapoints are aggregated into weeks regardless of the year they are collected in, so some weeks were measured in both 2024 and 2025 but they would both show up in the same week number. 

1. This takes account of the hemisphere in which the recording was collected. Since Winter in the Southern Hemisphere is June through August, while Winter in the Northern Hemisphere is December through February, we have adjusted the week numbers so that they line up meterologically. Essentially, a measurement collected in the Northern Hemisphere on the first of January would show up as week 1, however, a measurement collected in the Southern Hemisphere on the first of January would show up as week 27.  

```{r}
convert_hemisphere <- function(x) {
  ((x + 25) %% 52) + 1
}

buildings_wide_df <- 
  buildings_wide_df |> 
  dplyr::mutate(
    meteorological_week = dplyr::if_else(
      sf::st_coordinates(geometry)[,2] < 0,
      lubridate::week(date) |> convert_hemisphere() |> factor(),
      lubridate::week(date) |> factor()
    )  
  )
```

```{r}
#| include: false
#| eval: false
buildings_wide_df |> 
  dplyr::mutate(
    year_month = paste0(lubridate::year(date), "-", lubridate::month(date))
    ) |> 
tidyplot(
    x = year_month,
    y = ppmavg
    ) |>  
    add_boxplot() |> 
    adjust_x_axis(
    title = "Date",
    rotate_labels = TRUE
  ) |>
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_y_axis_title("CO2 ppm average") |> 
  remove_legend() |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

```{r}
#| include: true
#| eval: true
#| warning: false
#| message: false

buildings_wide_df |> 
  # dplyr::mutate(
  #   week = lubridate::week(date) |> factor(),
  #   ) |> 
  dplyr::group_by(meteorological_week) |> 
  dplyr::summarise(
    ppmavg = median(ppmavg, na.rm = TRUE)
    ) |> 
tidyplot(
    x = meteorological_week,
    y = ppmavg
    ) |>  
    add_curve_fit(linewidth = 2,  alpha = 0.5,  se = FALSE) |> 
    add_data_points(size = 2, alpha = 0.4) |> 
    adjust_x_axis(
    title = "Week of the year (meteorological)",
    rotate_labels = TRUE,
    breaks = seq(0, 52, by = 4)
  ) |>
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_legend_position("top") |> 
  adjust_y_axis_title("CO2 ppm median") |> 
  # remove_legend() |> 
#   adjust_title("CO2 Averages at music venues") |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

If we split the graph by the most popular building types, we can start to see some interesting trends. Supermarkets remain relatively high throughout the year with little variation while fast food, and chemists have quite a strong dip in CO^2^ levels during the Summer. This may be because most supermarkets keep their doors closed throughout the year and they tend to have larger buildings; conversely, chemists and fast food restraunts tend to be small to medium sized buildings which means that they can be very easily ventilated if they leave their front door open in the Summer. Restaurants have a very interesting trend here, the strong upward trend of the model at the end of the year is probably due to not enough measurements of restaurants yet rather that there being any meaningful conclusions. Over time we should hopefully see more stable trends show up.

```{r}
#| include: true
#| eval: true
#| warning: false
#| message: false

buildings_wide_df |> 
  dplyr::mutate(
    newtag = dplyr::if_else(
      osmtag %in% common_building_types$osmtag,
      osmtag,
      "other"
    ) |> 
      stringr::str_replace_all("_", " ") |> 
      stringr::str_to_sentence()
    ) |> 
  dplyr::group_by(meteorological_week, newtag) |> 
  dplyr::summarise(
    ppmavg = median(ppmavg, na.rm = TRUE)
    ) |>  
tidyplot(
    x = meteorological_week,
    y = ppmavg,
    color = newtag
    ) |>  
    add_curve_fit(linewidth = 2,  alpha = 0.5,  se = FALSE) |> 
    add_data_points(size = 2, alpha = 0.4) |> 
    adjust_x_axis(
    title = "Week of the year (meteorological)",
    rotate_labels = TRUE,
    breaks = seq(0, 52, by = 4)
  ) |>
  adjust_y_axis(
    limits = c(NA, 1200)
    ) |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_legend_title("Building type") |> 
  adjust_y_axis_title("CO2 ppm median") |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

```{r}
measurements_this_year <- 
  buildings_wide_df |> 
  dplyr::filter(dplyr::between(
        date,
        lubridate::today() - lubridate::weeks(52),
        lubridate::today()
    ))|>
       nrow() 
```

Here's a histogram showing how many measurements have been recorded each week since the start of the project. Over the last 12 months there have been `r measurements_this_year` building measurements which is `r round(measurements_this_year/12)` per month or `r round(measurements_this_year/52)` per week. 

```{r}
#| include: true
#| eval: true
#| warning: false
#| message: false
buildings_wide_df |> 
tidyplot(
    x = date
    ) |>  
    add_histogram(
      bins = ceiling((lubridate::interval(buildings_wide_df$date |> min(), buildings_wide_df$date |> max()))/lubridate::dweeks(1))
      ) |> 
    adjust_x_axis(
    title = "Date",
    breaks = scales::breaks_width("2 months"),
    labels = scales::label_date("%Y-%m"),
    rotate_labels = TRUE
  ) |>
#   adjust_y_axis(transform = "log2") |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_y_axis_title("Observations per week") |> 
  remove_legend() |> 
#   adjust_title("CO2 Averages at music venues") |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

## Transit

```{r}
transit_long_df_short_geo <- readRDS(here::here("data/derivative/transit_long_df_short_geo.rds")) |> 
  dplyr::rowwise() |> 
  dplyr::mutate(
    location_description = glue::glue("{city %||% county %||% province %||% state %||% town %||% municipality %||% region %||% borough %||% suburb %||% neighbourhood %||% city_district}, {country}")
      ) |> 
    sf::st_as_sf(coords = c("X", "Y"), crs = sf::st_crs(transit_long_df_short))

transit_long_df_short <- sf::st_join(
  transit_long_df_short,
  transit_long_df_short_geo,
  left = TRUE,
  largest = TRUE
) |> dplyr::ungroup()
```

```{r}
#| echo: false
most_measured_transit <- 
transit_long_df_short |> 
  dplyr::group_by(line) |> 
  dplyr::summarise(
    n = length(unique(uid)),
    lineName = dplyr::first(lineName) |> stringr::str_split_i("(:| → )", 1),
    # osmtag = dplyr::first(osmtag),
    countryname = dplyr::first(country),
    location_description = dplyr::first(location_description),
    min_day = min(date),
    max_day = max(date),
    ppm_min = min(co2Array) |> round(),
    ppm_avg = mean(co2Array) |> round(),
    ppm_max = max(co2Array) |> round()
  ) |> 
  dplyr::slice_max(n = 1, order_by = n)
```

```{r}
#| include: false
describe_most_measured_transit <- function(x) {
  sentence_mm <- 
  x |> 
    glue::glue_data("the {lineName} in {location_description} (min: {ppm_min}, mean: {ppm_avg}, max: {ppm_max})") |> 
    stringr::str_flatten_comma(last = " and ")

  if (nrow(x) == 1) {
    return(glue::glue("The most measured transit line was {sentence_mm}, which was measured {x$n[1]} times."))
  }

  if (nrow(x) > 1) {
    glue::glue("The most measured transit lines were {sentence_mm}, which were measured {x$n[1]} times each.")
  }
  
}
```

This month there were `r length(unique(transit_long_df_short$uid))` measurements of `r length(unique(transit_long_df_short$line))` unique transit lines. `r describe_most_measured_transit(most_measured_transit)` 

<!-- ## Everything -->

<!-- Combine both long datasets and then make a beeswarm comparing buildings to transit -->

```{r}
#| warning: false
#| message: false
#| include: false
buildings_long_df |> 
    dplyr::group_by(obs_number) |> 
    dplyr::summarise(
        co2_median = median(co2readings, na.rm = TRUE),
        ventilation = dplyr::first(ventilation)
        ) |> 
tidyplot(
         x = ventilation, 
         y = co2_median,
         color = co2_median
         ) |> 
  # add_violin() |>
  add_data_points_beeswarm(size = 3) |> 
  adjust_y_axis(transform = "log2") |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_x_axis_title("Ventilation system on?") |> 
  adjust_y_axis_title("CO2 ppm average") |> 
  remove_legend() |> 
  # adjust_title("CO2 Averages at music venues") |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```

```{r}
#| include: false

buildings_long_df |> 
    dplyr::group_by(obs_number) |> 
    dplyr::summarise(
        co2_median = median(co2readings, na.rm = TRUE),
        openwindows = dplyr::first(openwindows)
        ) |> 
tidyplot(
         x = openwindows, 
         y = co2_median,
         color = co2_median
         ) |> 
  # add_violin() |>
  add_data_points_beeswarm(size = 3) |> 
  adjust_y_axis(transform = "log2") |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_x_axis_title("Windows open?") |> 
  adjust_y_axis_title("CO2 ppm average") |> 
  remove_legend() |> 
  # adjust_title("CO2 Averages at music venues") |> 
  adjust_caption("Data from indoorCO2map.com", fontsize = 10)
```