---
title: "Monthly Indoor CO2 Summary"
format: html
editor: visual
execute:
  echo: false
---


# The monthly indoorCO2map.com summary


```{r}
#| include: false
library(ggplot2)
library(tidyplots)
library(gt)
```

```{r}
#| include: false
buildings_wide_df <- autocruller::ac_get_co2("web") 

buildings_wide_df_short <- 
buildings_wide_df |> 
    dplyr::filter(dplyr::between(
        lubridate::floor_date(date, unit = "month"),
        lubridate::today() |> lubridate::floor_date(unit = "month"),
        lubridate::today() |> lubridate::ceiling_date(unit = "month")
    )) |> 
        dplyr::mutate(type = "building")

buildings_long_df <- autocruller::ac_unnest_longer(buildings_wide_df_short)

transit_long_df <- autocruller::ac_get_co2("transit") 

transit_long_df_short <- 
transit_long_df |> 
    dplyr::filter(dplyr::between(
        lubridate::floor_date(date, unit = "month"),
        lubridate::today() |> lubridate::floor_date(unit = "month"),
        lubridate::today() |> lubridate::ceiling_date(unit = "month")
    )) |> 
        dplyr::mutate(type = "transit")
# everything_df <- dplyr::bind_rows()
```


## Buildings

This month there were `r nrow(buildings_wide_df)` measurements of `r length(unique(buildings_wide_df$combined_id))` unique buildings. 


```{r}
countries_count <- 
buildings_wide_df_short |> 
    dplyr::group_by(countryname) |> 
    dplyr::count() |> 
    tidyr::drop_na() |> 
    sf::st_drop_geometry() |> 
    dplyr::ungroup()

# not yet done. need to give transit data a country col
# countries_count_transit <- 
#     transit_long_df |> 
#     dplyr::group_by(countryname) |> 
#     dplyr::summarise(dplyr::n_distinct(uid)) |> 
#     tidyr::drop_na() |> 
#     sf::st_drop_geometry()
# then join with countries_count
countries_count <- countries_count[order(countries_count$n, decreasing = TRUE),]
# countries_count <- dplyr::left_join(countries_count, countries_count_transit, by = dplyr::join_by(countryname))
countries_count |> 
    # dplyr::arrange(n) 
    gt() |> 
    tab_header(title = "Top countries") |> 
    cols_label(
        countryname = "Country",
        n = "Number of buildings"
    ) |> 
    tab_options(
        table_body.hlines.width = 0
        )
    
```


Make a year to date point graph of co2~date with points coloured by amenity type.


```{r}
tidyplot(
    buildings_wide_df,
    x = date,
    y = ppmavg,
    color = osmtag
    ) |>  
    add_data_points(size = 3) |> 
#   adjust_y_axis(transform = "log2") |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
#   adjust_x_axis_title("Ventilation system on?") |> 
  adjust_y_axis_title("CO2 ppm average") |> 
  remove_legend() |> 
#   adjust_title("CO2 Averages at music venues") |> 
  adjust_caption("Data from indoorCO2map.com")
```


## Transit

## Everything

Combine both long datasets and then make a beeswarm comparing buildings to transit

```{r}
buildings_long_df |> 
    dplyr::group_by(obs_number) |> 
    dplyr::summarise(
        co2_median = median(co2readings, na.rm = TRUE),
        ventilation = dplyr::first(ventilation)
        ) |> 
tidyplot(
         x = ventilation, 
         y = co2_median,
         color = co2_median) |> 
  # add_violin() |>
  add_data_points_beeswarm(size = 3) |> 
  adjust_y_axis(transform = "log2") |> 
  adjust_size(width = NA, height = NA, unit = "cm") |> 
  adjust_font(fontsize = 16) |> 
  adjust_x_axis_title("Ventilation system on?") |> 
  adjust_y_axis_title("CO2 ppm average") |> 
  remove_legend() |> 
  adjust_title("CO2 Averages at music venues") |> 
  adjust_caption("Data from indoorCO2map.com")
```
